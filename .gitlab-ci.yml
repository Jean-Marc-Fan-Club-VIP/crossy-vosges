stages:
  - prepare
  - build_and_test
  - deploy
  - release

# If you are looking for a place where to add 'UNITY_LICENSE_FILE' and other secrets, please visit your project's gitlab page:
# settings > CI/CD > Variables instead
variables:
  BUILD_NAME: CrossyVosges
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  IMAGE: unityci/editor # https://hub.docker.com/r/unityci/editor
  IMAGE_VERSION: 3
  UNITY_DIR: $CI_PROJECT_DIR/Game
  # You can expose this in Unity via Application.version
  VERSION_NUMBER_VAR: $CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID-$CI_JOB_ID
  VERSION_BUILD_VAR: $CI_PIPELINE_IID

image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

get-unity-version:
  image: alpine
  stage: prepare
  variables:
    GIT_DEPTH: 1
  script:
    - echo UNITY_VERSION=$(cat $UNITY_DIR/ProjectSettings/ProjectVersion.txt | grep "m_EditorVersion:.*" | awk '{ print $2}') | tee prepare.env
  artifacts:
    reports:
      dotenv: prepare.env

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
  needs:
    - job: get-unity-version
      artifacts: true

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - $UNITY_DIR/Library/

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null'
      when: always

.unity_defaults: &unity_defaults
  <<:
    - *unity_before_script
    - *cache
    - *license

# run this job when you need to request a license
# you may need to follow activation steps from documentation
get-activation-file:
  <<: *unity_before_script
  rules:
    - if: '$UNITY_LICENSE == null'
      when: manual
  stage: prepare
  script:
    - chmod +x ./ci/get_activation_file.sh && ./ci/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min # Expiring this as artifacts may contain sensitive data and should not be kept public

.build: &build
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  tags:
    - gitlab-org

build-StandaloneLinux64:
  <<: *build
  variables:
    BUILD_TARGET: StandaloneLinux64
  after_script:
    - zip -r StandaloneLinux64.zip $UNITY_DIR/Builds/StandaloneLinux64
    - echo "JOB_LINUX_ID=$CI_JOB_ID" >> build_ids.env
  artifacts:
    paths:
      - StandaloneLinux64.zip
    reports:
      dotenv: build_ids.env

build-StandaloneOSX:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-mac-mono-$IMAGE_VERSION
  variables:
    BUILD_TARGET: StandaloneOSX
  after_script:
    - zip -r StandaloneOSX.zip $UNITY_DIR/Builds/StandaloneOSX
    - echo "JOB_MACOS_ID=$CI_JOB_ID" >> build_ids.env
  artifacts:
    paths:
      - StandaloneOSX.zip
    reports:
      dotenv: build_ids.env

build-StandaloneWindows64:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-windows-mono-$IMAGE_VERSION
  variables:
    BUILD_TARGET: StandaloneWindows64
  after_script:
    - zip -r StandaloneWindows64.zip $UNITY_DIR/Builds/StandaloneWindows64
    - echo "JOB_WINDOWS_ID=$CI_JOB_ID" >> build_ids.env
  artifacts:
    paths:
      - StandaloneWindows64.zip
    reports:
      dotenv: build_ids.env

pages:
  image: alpine:latest
  stage: deploy
  script:
    - mv "$UNITY_DIR/Builds/WebGL/${BUILD_NAME}" public
  artifacts:
    paths:
      - public
  only:
    - release
  
release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - source build_ids.env
    - echo "running release_job"
  needs:
    - job: build-job
      artifacts: true
  release:
    name:  'Crossy-Vosges $CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG_MESSAGE'
    assets: 
      links:
        - name: 'Windows'
          url: '${CI_PROJECT_URL}/-/jobs/${JOB_WINDOWS_ID}/artifacts/file/StandaloneWindows64.zip'
        - name: 'MacOS'
          url: '${CI_PROJECT_URL}/-/jobs/${JOB_WINDOWS_ID}/artifacts/file/StandaloneOSX.zip'
        - name: 'Linux'
          url: '${CI_PROJECT_URL}/-/jobs/${JOB_WINDOWS_ID}/artifacts/file/StandaloneLinux64.zip'

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
